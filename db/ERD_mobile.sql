SET SESSION FOREIGN_KEY_CHECKS=0;

/* Drop Tables */

DROP TABLE IF EXISTS CHATTING;
DROP TABLE IF EXISTS USER_CHAT;
DROP TABLE IF EXISTS CHATROOM;
DROP TABLE IF EXISTS MESSAGE_CMT;
DROP TABLE IF EXISTS USER_MESSAGE;
DROP TABLE IF EXISTS MESSAGE;
DROP TABLE IF EXISTS USER;




/* Create Tables */

CREATE TABLE CHATROOM
(
	CHATROOM_ID bigint NOT NULL,
	CREATE_DATE datetime,
	USER_CNT int,
	PRIMARY KEY (CHATROOM_ID)
);


-- 여기는 안읽은 메세지만 쌓이는 DB
-- 
-- Chatting 내용은 무조건 안드로이드 내부 db에 저장하여 볼 
CREATE TABLE CHATTING
(
	CHATROOM_ID bigint NOT NULL,
	CHATTING_ID bigint NOT NULL,
	USER_TOKEN varchar(128) NOT NULL,
	MSG varchar(1024),
	READ_CNT int,
	CREATE_DATE datetime,
	PRIMARY KEY (CHATROOM_ID, CHATTING_ID)
) COMMENT = '여기는 안읽은 메세지만 쌓이는 DB

Chatting 내용은 무조건 안드로이드 내부 db에 저장하여 볼 ';


CREATE TABLE MESSAGE
(
	MESSAGE_ID bigint NOT NULL,
	-- 관리자가 광고/이벤트식으로 올렸는지, 
	-- 사용자가 메시지를 생성한것인지
	MESSAGE_TYPE int COMMENT '관리자가 광고/이벤트식으로 올렸는지, 
사용자가 메시지를 생성한것인지',
	CREATE_DATE datetime,
	ACCESS_CNT int,
	EVENT_KEY bigint NOT NULL,
	PRIMARY KEY (MESSAGE_ID)
);


CREATE TABLE MESSAGE_CMT
(
	MESSAGE_ID bigint NOT NULL,
	MESSAGE_CMT_ID bigint NOT NULL,
	USER_TOKEN varchar(128) NOT NULL,
	CMT varchar(300),
	CREATE_DATE datetime,
	PRIMARY KEY (MESSAGE_ID, MESSAGE_CMT_ID)
);


CREATE TABLE USER
(
	USER_TOKEN varchar(128) NOT NULL,
	USER_ID varchar(20) NOT NULL,
	USER_NM varchar(20),
	USER_IMG varchar(128),
	USER_MAIL varchar(50),
	-- 
	-- 
	USER_AUTH int COMMENT '
',
	USER_AGE int,
	USER_CONTRY varchar(30),
	USER_PROFILE varchar(300),
	PRIMARY KEY (USER_TOKEN)
);


CREATE TABLE USER_CHAT
(
	CHATROOM_ID bigint NOT NULL,
	POSS_AUTH int,
	ALARM int,
	USER_TOKEN varchar(128) NOT NULL,
	PRIMARY KEY (CHATROOM_ID, USER_TOKEN)
);


CREATE TABLE USER_MESSAGE
(
	MESSAGE_ID bigint NOT NULL,
	USER_TOKEN varchar(128) NOT NULL,
	POSS_AUTH int,
	ALARM int,
	REQUEST_STATUS int,
	REQUEST_CMT varchar(512),
	PRIMARY KEY (MESSAGE_ID, USER_TOKEN)
);



/* Create Foreign Keys */

ALTER TABLE CHATTING
	ADD FOREIGN KEY (CHATROOM_ID)
	REFERENCES CHATROOM (CHATROOM_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE USER_CHAT
	ADD FOREIGN KEY (CHATROOM_ID)
	REFERENCES CHATROOM (CHATROOM_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE MESSAGE_CMT
	ADD FOREIGN KEY (MESSAGE_ID)
	REFERENCES MESSAGE (MESSAGE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE USER_MESSAGE
	ADD FOREIGN KEY (MESSAGE_ID)
	REFERENCES MESSAGE (MESSAGE_ID)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE CHATTING
	ADD FOREIGN KEY (USER_TOKEN)
	REFERENCES USER (USER_TOKEN)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE MESSAGE_CMT
	ADD FOREIGN KEY (USER_TOKEN)
	REFERENCES USER (USER_TOKEN)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE USER_CHAT
	ADD FOREIGN KEY (USER_TOKEN)
	REFERENCES USER (USER_TOKEN)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;


ALTER TABLE USER_MESSAGE
	ADD FOREIGN KEY (USER_TOKEN)
	REFERENCES USER (USER_TOKEN)
	ON UPDATE RESTRICT
	ON DELETE RESTRICT
;



